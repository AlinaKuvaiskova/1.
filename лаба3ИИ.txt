# Модуль Urok2 
import random 
# Обучающая выборка (идеальное изображение цифр от 0 до 9) 
num0= list('111101101101111') 
num1= list('001001001001001') 
num2= list('111001111100111') 
num3= list('111001111001111') 
num4= list('101101111001001') 
num5= list('111100111001111') 
num6= list('111100111101111') 
num7= list('111001001001001') 
num8= list('111101111101111') 
num9= list('111101111001111') 
# Список всех цифр от 0 до 9 в едином массиве 
nums = [num0, num1, num2, num3, num4, num5, num6, num7, num8, num9] 
tema = 5 # какой цифре обучаем 
n_sensor = 3 * 5 # количество сенсоров 
weights = [0 for i in range(n_sensor)] # обнуление весов 
# Функция определяет, является ли полученное изображение числом 5 
# Возвращает Да, если признано, что это 5. Возвращает Нет, если отвергнуто, что это 5 
def perceptron(Sensor): 
    Ь = 7 # Порог функции активации 
    s = 0 # Начальное значение суммы 
    for i in range(n_sensor): # цикл суммирования сигналов от сенсоров 
        s+=int(Sensor[i]) * weights[i] 
    if s >= Ь: 
        return True # Сумма превысила порог 
    else: 
        return False # Сумма меньше порога 
# Уменьшение значений весов 
# Если сеть ошиблась и выдала Да при входной цифре, отличной от пятерки 
def decrease(numer): 
    for i in range(n_sensor): 
        if int(numer[i]) == 1: # Возбужденный ли вход 
            weights[i] -= 1 # Уменьшаем связанный с входом вес на единицу 
 # Увеличение значений весов 
 # Если сеть не ошиблась и выдала Да при поданной на вход цифре 5 
def increase(numer): 
    for i in range(n_sensor): 
        if int(numer[i]) == 1: # Возбужденный ли вход 
            weights[i] += 1 # Увеличиваем связанный с входом вес на единицу 
# Тренировка сети 
n = 1 # количество уроков 
for i in range(n): 
    j = random.randint(0, 9) # Генерируем случайное число j от О до 9 
    r = perceptron(nums[j]) # Результат обращения к сумматору (ответ - Да или Нет) 
if j != tema: # Если генератор вьщал случайное число j, не равное 5 
    if r: # Если сумматор сказал Да (это пятерка), 
 # а j это не пятерка. Ошибся 
            decrease(nums[j]) # наказываем сеть (уменьшаем значения весов) 
    else: # Если генератор вьдал случайное число j, равное 5 
        if not r: # Если сумматор сказал Нет (с not значит 
 # Да - это пятерка), и j=5. Не ошибся 
            increase(nums[tema]) # поощряем сеть (увеличиваем значения весов) 
print(j) 
print("Веса") 
print(weights) # Вывод значений весов